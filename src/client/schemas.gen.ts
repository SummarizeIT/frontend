// This file is auto-generated by @hey-api/openapi-ts

export const $UpdateUserRequest = {
  type: 'object',
  properties: {
    groupIds: {
      type: 'array',
      items: {
        type: 'string',
        description: 'ID of the group',
        format: 'uuid',
        example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
      },
    },
    roleIds: {
      type: 'array',
      items: {
        type: 'string',
        description: 'ID of the role',
        format: 'uuid',
        example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
      },
    },
  },
} as const;

export const $ErrorResponse = {
  required: ['message'],
  type: 'object',
  properties: {
    message: {
      type: 'string',
      description: 'Response messages field',
      example: 'This is message field',
    },
  },
} as const;

export const $UpdateRoleRequest = {
  required: ['name'],
  type: 'object',
  properties: {
    name: {
      maxLength: 50,
      minLength: 0,
      pattern: '^(?!Default|Admin).+$',
      type: 'string',
      description: 'Name of the role',
      example: 'Sample Role',
    },
    users: {
      type: 'array',
      description: 'Array of UUIDs representing users assigned to the role',
      example: [
        '6f0766f8-8580-4ec9-8674-3dcd72f8188b',
        'b743611b-8488-4694-9c91-49f94f2dfb24',
      ],
      items: {
        type: 'string',
        description: 'Array of UUIDs representing users assigned to the role',
        format: 'uuid',
      },
    },
    adminPermissions: {
      type: 'array',
      items: {
        type: 'string',
        description: 'Organization admin permissions for the user',
        enum: ['ADMIN_ROLES', 'ADMIN_USERS', 'ADMIN_GROUPS', 'ADMIN_MEDIA'],
      },
    },
  },
} as const;

export const $RoleLeader = {
  required: ['changeExtensions', 'id'],
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: 'UUID of role',
      format: 'uuid',
      example: '41b2999d-d327-4dc8-9956-2fadc0dc8778',
    },
    changeExtensions: {
      type: 'boolean',
      description: 'Allow leader to change extensions',
      default: true,
    },
  },
  description: 'Properties for role group leader',
} as const;

export const $UpdateGroupRequest = {
  required: ['name'],
  type: 'object',
  properties: {
    color: {
      type: 'string',
      description: 'Color code of the group',
      example: 'FF0000',
    },
    name: {
      type: 'string',
      description: 'Name of the group',
      example: 'Sample Group',
    },
    users: {
      type: 'array',
      description: 'Array of UUIDs representing users in the group',
      example: [
        '6f0766f8-8580-4ec9-8674-3dcd72f8188b',
        'b743611b-8488-4694-9c91-49f94f2dfb24',
      ],
      items: {
        type: 'string',
        description: 'Array of UUIDs representing users in the group',
        format: 'uuid',
      },
    },
    groupLeaders: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/RoleLeader',
      },
    },
  },
} as const;

export const $UpdateOrganizationRequest = {
  required: ['name'],
  type: 'object',
  properties: {
    name: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: 'Name of the organization',
      example: 'My Organization',
    },
  },
  description: 'Request body to update',
} as const;

export const $DetailedErrorResponse = {
  required: ['items', 'message'],
  type: 'object',
  properties: {
    message: {
      type: 'string',
      description: 'Response messages field',
      example: 'This is message field',
    },
    items: {
      type: 'object',
      additionalProperties: {
        type: 'string',
        description: 'Error message',
        nullable: true,
        example: '{"foo":"Bar"}',
      },
      description: 'Error message',
      nullable: true,
      example: {
        foo: 'Bar',
      },
    },
  },
} as const;

export const $UpdateExtension = {
  required: ['identifier', 'isEnabled', 'isEnabledByDefault'],
  type: 'object',
  properties: {
    identifier: {
      type: 'string',
      description: 'Identifier of the extension',
      example: 'test-bank',
    },
    isEnabled: {
      type: 'boolean',
      description: 'Toggle extension',
      example: true,
    },
    isEnabledByDefault: {
      type: 'boolean',
      description: 'Toggle extension',
      example: true,
    },
  },
  description: 'Extension Update object',
} as const;

export const $UpdateExtensionsRequest = {
  required: ['extensions'],
  type: 'object',
  properties: {
    extensions: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UpdateExtension',
      },
    },
  },
  description: 'Update request body',
} as const;

export const $UpdateFolderRequest = {
  required: ['name'],
  type: 'object',
  properties: {
    name: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: 'Name of the folder',
      example: 'AI Folder',
    },
  },
  description: 'Request body to rename',
} as const;

export const $UpdateFolderPermissionsRequest = {
  type: 'object',
  properties: {
    groups: {
      type: 'array',
      items: {
        type: 'string',
        description: 'UUID array of group ids',
        example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
      },
    },
    public: {
      type: 'boolean',
    },
  },
  description: 'Request body to rename',
} as const;

export const $MoveFolderRequest = {
  type: 'object',
  properties: {
    destinationFolderId: {
      type: 'string',
      description:
        'ID of the destination folder where the folder will be copied',
      format: 'uuid',
      example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
    },
  },
  description: 'Request body to move',
} as const;

export const $Extension = {
  required: ['identifier'],
  type: 'object',
  properties: {
    identifier: {
      type: 'string',
      description: 'Identifier of the extension',
      example: 'test-bank',
    },
    content: {
      type: 'object',
      description: 'Content of the extension',
      example: {
        key: 'value',
      },
    },
  },
  description: 'Extension associated with an entry',
} as const;

export const $UpdateEntryRequest = {
  required: ['title'],
  type: 'object',
  properties: {
    title: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: 'Title of the entry',
      example: 'Sample Title',
    },
    extensions: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Extension',
      },
    },
  },
  description: 'Request body to rename',
} as const;

export const $MoveEntryRequest = {
  type: 'object',
  properties: {
    destinationFolderId: {
      type: 'string',
      description:
        'ID of the destination folder where the folder will be copied',
      format: 'uuid',
      example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
    },
  },
  description: 'Request body to move',
} as const;

export const $UpdateMeRequest = {
  required: ['firstName', 'lastName'],
  type: 'object',
  properties: {
    firstName: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: 'Name of the user',
      example: 'John',
    },
    lastName: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: 'Lastname of the user',
      example: 'DOE',
    },
  },
} as const;

export const $CreateOrganizationRequest = {
  required: ['name'],
  type: 'object',
  properties: {
    name: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: 'Name of the organization',
      example: 'My Organization',
    },
  },
  description: 'Create organization request',
} as const;

export const $InviteUserRequest = {
  type: 'object',
  properties: {
    email: {
      type: 'string',
      description: 'email of the user',
      example: 'example@mail.com',
    },
  },
  description: 'Create request body',
} as const;

export const $CreateRoleRequest = {
  required: ['name'],
  type: 'object',
  properties: {
    name: {
      maxLength: 50,
      minLength: 0,
      pattern: '^(?!Default|Admin).+$',
      type: 'string',
      description: 'Name of the role',
      example: 'Sample Role',
    },
    users: {
      type: 'array',
      description: 'Array of UUIDs representing users assigned to the role',
      example: [
        '6f0766f8-8580-4ec9-8674-3dcd72f8188b',
        'b743611b-8488-4694-9c91-49f94f2dfb24',
      ],
      items: {
        type: 'string',
        description: 'Array of UUIDs representing users assigned to the role',
        format: 'uuid',
      },
    },
    adminPermissions: {
      type: 'array',
      items: {
        type: 'string',
        description: 'Organization admin permissions for the user',
        enum: ['ADMIN_ROLES', 'ADMIN_USERS', 'ADMIN_GROUPS', 'ADMIN_MEDIA'],
      },
    },
  },
} as const;

export const $CreateGroupRequest = {
  required: ['name'],
  type: 'object',
  properties: {
    color: {
      type: 'string',
      description: 'Color code of the group',
      example: 'FF0000',
    },
    name: {
      type: 'string',
      description: 'Name of the group',
      example: 'Sample Group',
    },
    users: {
      type: 'array',
      description: 'Array of UUIDs representing users in the group',
      example: [
        '6f0766f8-8580-4ec9-8674-3dcd72f8188b',
        'b743611b-8488-4694-9c91-49f94f2dfb24',
      ],
      items: {
        type: 'string',
        description: 'Array of UUIDs representing users in the group',
        format: 'uuid',
      },
    },
    groupLeaders: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/RoleLeader',
      },
    },
  },
} as const;

export const $CreateFolderRequest = {
  required: ['name'],
  type: 'object',
  properties: {
    name: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: 'Name of the folder',
      example: 'AI Folder',
    },
    parentId: {
      type: 'string',
      description: 'UUID of the parent directory',
      format: 'uuid',
      example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
    },
  },
  description: 'Folder Details',
} as const;

export const $UploadEntryRequest = {
  required: ['title'],
  type: 'object',
  properties: {
    parentFolderId: {
      type: 'string',
      description:
        'ID of the destination folder where the entry will be uploaded',
      format: 'uuid',
      example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
    },
    title: {
      maxLength: 430,
      minLength: 0,
      type: 'string',
      description: 'Lastname of the user',
      example: 'DOE',
    },
  },
} as const;

export const $ExtensionRequest = {
  type: 'object',
  properties: {
    identifier: {
      type: 'string',
      description: 'Extension identifier',
      example: 'body',
    },
    command: {
      type: 'string',
      description: 'Extension command',
      example: 'generate',
    },
    payload: {
      type: 'string',
      description: 'Extension payload',
      example: 'body',
    },
  },
  description: 'Extension action request',
} as const;

export const $PasswordRequest = {
  required: ['email'],
  type: 'object',
  properties: {
    email: {
      type: 'string',
      description: 'E-mail of the user',
      example: 'mail@example.com',
    },
  },
  description: 'Request body to password',
} as const;

export const $SuccessResponse = {
  required: ['message'],
  type: 'object',
  properties: {
    message: {
      type: 'string',
      description: 'Response message field',
      example: 'Success!',
    },
  },
} as const;

export const $ResetPasswordRequest = {
  required: ['password', 'passwordConfirm'],
  type: 'object',
  properties: {
    password: {
      type: 'string',
      description: 'New password of the user',
      example: 'P@sswd123.',
    },
    passwordConfirm: {
      type: 'string',
      description: 'New password confirmation for the user',
      example: 'P@sswd123.',
    },
  },
  description: 'Request body to update password',
} as const;

export const $PasswordResetResponse = {
  required: [
    'createdAt',
    'expirationDate',
    'id',
    'token',
    'updatedAt',
    'userId',
  ],
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: 'UUID',
      example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
    },
    token: {
      type: 'string',
      description: 'Token',
      example: 'KQJGpJ...',
    },
    userId: {
      type: 'string',
      description: 'User ID',
      format: 'uuid',
    },
    expirationDate: {
      type: 'string',
      description: 'Expiration date',
      format: 'date-time',
    },
    createdAt: {
      type: 'string',
      description: 'Date time field of user creation',
      format: 'date-time',
    },
    updatedAt: {
      type: 'string',
      description: 'Date time field of user update',
      format: 'date-time',
    },
  },
} as const;

export const $RegisterRequest = {
  required: ['email', 'lastName', 'name', 'password', 'passwordConfirm'],
  type: 'object',
  properties: {
    email: {
      maxLength: 100,
      minLength: 0,
      type: 'string',
      description: 'Email of the user',
      example: 'mail@example.com',
    },
    password: {
      type: 'string',
      description: 'Password of the user',
      example: 'P@sswd123.',
    },
    passwordConfirm: {
      type: 'string',
      description: 'Password for confirmation',
      example: 'P@sswd123.',
    },
    name: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: 'Name of the user',
      example: 'John',
    },
    lastName: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: 'Lastname of the user',
      example: 'DOE',
    },
  },
  description: 'Request body to register',
} as const;

export const $LoginRequest = {
  required: ['email', 'password'],
  type: 'object',
  properties: {
    email: {
      type: 'string',
      description: 'E-mail of the user',
      example: 'mail@example.com',
    },
    password: {
      type: 'string',
      description: 'Password of the user',
      example: 'P@sswd123.',
    },
    rememberMe: {
      type: 'boolean',
      description: 'Remember option for refresh token',
      example: true,
    },
  },
  description: 'Request body to login',
} as const;

export const $TokenExpiresInResponse = {
  required: ['refreshToken', 'token'],
  type: 'object',
  properties: {
    token: {
      type: 'integer',
      description: 'Token expires In',
      format: 'int64',
      example: 3600,
    },
    refreshToken: {
      type: 'integer',
      description: 'Refresh token expires In',
      format: 'int64',
      example: 3600,
    },
  },
  description: 'Expires In',
} as const;

export const $TokenResponse = {
  required: ['expiresIn', 'refreshToken', 'token'],
  type: 'object',
  properties: {
    token: {
      type: 'string',
      description: 'Token',
      example: 'eyJhbGciOiJIUzUxMiJ9...',
    },
    refreshToken: {
      type: 'string',
      description: 'Refresh Token',
      example: 'eyJhbGciOiJIUzUxMiJ9...',
    },
    expiresIn: {
      $ref: '#/components/schemas/TokenExpiresInResponse',
    },
  },
} as const;

export const $ListQueryRequest = {
  type: 'object',
  properties: {
    search: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: 'Search query',
      example: 'John Doe',
    },
    page: {
      type: 'integer',
      description: 'Page number',
      format: 'int32',
      example: 1,
    },
    ids: {
      type: 'array',
      description: 'Only show the following ids',
      example: ['120b2663-412a-4a98-8c7b-19115fd8a0b0'],
      items: {
        type: 'string',
        description: 'Only show the following ids',
        format: 'uuid',
      },
    },
  },
  description: 'Query parameters for list endpoints',
} as const;

export const $UserPaginationResponse = {
  required: ['items', 'page', 'pages', 'size', 'total'],
  type: 'object',
  properties: {
    page: {
      type: 'integer',
      description: 'Page',
      format: 'int32',
      example: 1,
    },
    pages: {
      type: 'integer',
      description: 'Pages',
      format: 'int32',
      example: 3,
    },
    size: {
      type: 'integer',
      description: 'size',
      format: 'int32',
      example: 3,
    },
    total: {
      type: 'integer',
      description: 'Total number of pages',
      format: 'int64',
      example: 10,
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UserResponse',
      },
    },
  },
} as const;

export const $UserResponse = {
  required: [
    'email',
    'groupIds',
    'id',
    'imageUrl',
    'lastname',
    'name',
    'roleIds',
  ],
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: 'UUID of the user',
      format: 'uuid',
      example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
    },
    imageUrl: {
      type: 'string',
      description: "URL of the user's image",
      example: 'https://example.com/image.jpg',
    },
    name: {
      type: 'string',
      description: 'First name of the user',
      example: 'John',
    },
    lastname: {
      type: 'string',
      description: 'Last name of the user',
      example: 'Doe',
    },
    email: {
      type: 'string',
      description: 'Email address of the user',
      example: 'john.doe@example.com',
    },
    groupIds: {
      type: 'array',
      items: {
        type: 'string',
        description: 'Group UUID that the user belongs to',
        format: 'uuid',
        example: '6f0766f8-8580-4ec9-8674-3dcd72f8188b',
      },
    },
    roleIds: {
      type: 'array',
      items: {
        type: 'string',
        description: 'Role UUID assigned to the user',
        format: 'uuid',
        example: '6f0766f8-8580-4ec9-8674-3dcd72f8188b',
      },
    },
  },
} as const;

export const $RolePaginationResponse = {
  required: ['items', 'page', 'pages', 'size', 'total'],
  type: 'object',
  properties: {
    page: {
      type: 'integer',
      description: 'Page',
      format: 'int32',
      example: 1,
    },
    pages: {
      type: 'integer',
      description: 'Pages',
      format: 'int32',
      example: 3,
    },
    size: {
      type: 'integer',
      description: 'size',
      format: 'int32',
      example: 3,
    },
    total: {
      type: 'integer',
      description: 'Total number of pages',
      format: 'int64',
      example: 10,
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/RoleResponse',
      },
    },
  },
} as const;

export const $RoleResponse = {
  required: ['adminPermissions', 'name', 'parentId', 'users'],
  type: 'object',
  properties: {
    parentId: {
      type: 'string',
      description: 'UUID of the role',
      format: 'uuid',
      example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
    },
    name: {
      type: 'string',
      description: 'Name of the role',
      example: 'Sample Role',
    },
    users: {
      type: 'array',
      description: 'Array of UUIDs representing users assigned to the role',
      example: [
        '6f0766f8-8580-4ec9-8674-3dcd72f8188b',
        'b743611b-8488-4694-9c91-49f94f2dfb24',
      ],
      items: {
        type: 'string',
        description: 'Array of UUIDs representing users assigned to the role',
        format: 'uuid',
      },
    },
    adminPermissions: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
  },
} as const;

export const $GroupPaginationResponse = {
  required: ['items', 'page', 'pages', 'size', 'total'],
  type: 'object',
  properties: {
    page: {
      type: 'integer',
      description: 'Page',
      format: 'int32',
      example: 1,
    },
    pages: {
      type: 'integer',
      description: 'Pages',
      format: 'int32',
      example: 3,
    },
    size: {
      type: 'integer',
      description: 'size',
      format: 'int32',
      example: 3,
    },
    total: {
      type: 'integer',
      description: 'Total number of pages',
      format: 'int64',
      example: 10,
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GroupResponse',
      },
    },
  },
} as const;

export const $GroupResponse = {
  required: ['color', 'groupLeaders', 'name', 'parentId', 'users'],
  type: 'object',
  properties: {
    parentId: {
      type: 'string',
      description: 'UUID of the group',
      format: 'uuid',
      example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
    },
    color: {
      type: 'string',
      description: 'Color code of the group',
      example: 'FF0000',
    },
    name: {
      type: 'string',
      description: 'Name of the group',
      example: 'Sample Group',
    },
    users: {
      type: 'array',
      description: 'Array of UUIDs representing users in the group',
      example: [
        '6f0766f8-8580-4ec9-8674-3dcd72f8188b',
        'b743611b-8488-4694-9c91-49f94f2dfb24',
      ],
      items: {
        type: 'string',
        description: 'Array of UUIDs representing users in the group',
        format: 'uuid',
      },
    },
    groupLeaders: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/RoleLeader',
      },
    },
  },
} as const;

export const $ExtensionInstance = {
  required: [
    'description',
    'identifier',
    'isEnabled',
    'isEnabledByDefault',
    'name',
    'version',
  ],
  type: 'object',
  properties: {
    identifier: {
      type: 'string',
      description: 'Identifier of the extension',
      example: 'test-bank',
    },
    name: {
      type: 'string',
      description: 'Name of the extension',
      example: 'Test Bank Extension',
    },
    description: {
      type: 'string',
      description: 'Description of the extension',
      example:
        'The test bank extension allows editors to write quick questions to test viewers.',
    },
    version: {
      type: 'string',
      description: 'Version of the extension',
      example: '1.0.0',
    },
    isEnabled: {
      type: 'boolean',
      description: 'Toggle extension',
      example: true,
    },
    isEnabledByDefault: {
      type: 'boolean',
      description: 'Toggle extension',
      example: true,
    },
  },
  description: 'Extension information',
} as const;

export const $ExtensionsResponse = {
  required: ['extensions'],
  type: 'object',
  properties: {
    extensions: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ExtensionInstance',
      },
    },
  },
} as const;

export const $Audio = {
  required: ['id', 'name'],
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: 'UUID of the object',
      format: 'uuid',
      example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
    },
    name: {
      type: 'string',
      description: 'Name of the object',
      example: 'CS',
    },
  },
  description: 'Audio file in the file system',
} as const;

export const $DirectoryBreadcrumbsResponse = {
  required: ['id', 'isDir', 'name'],
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: 'UUID of the directory',
      format: 'uuid',
    },
    name: {
      type: 'string',
      description: 'Name of the directory',
      example: 'CS',
    },
    isDir: {
      type: 'boolean',
      description: 'Indicates if the directory is a directory',
    },
  },
} as const;

export const $FileSystemObject = {
  required: ['id', 'name'],
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: 'UUID of the object',
      format: 'uuid',
      example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
    },
    name: {
      type: 'string',
      description: 'Name of the object',
      example: 'CS',
    },
  },
  description: 'Directory or File in the file system',
  anyOf: [
    {
      $ref: '#/components/schemas/FolderObjectResponse',
    },
    {
      $ref: '#/components/schemas/Audio',
    },
  ],
} as const;

export const $FolderObjectResponse = {
  required: ['id', 'isDir', 'name'],
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: 'UUID of the object',
      format: 'uuid',
      example: '120b2663-412a-4a98-8c7b-19115fd8a0b0',
    },
    name: {
      type: 'string',
      description: 'Name of the object',
      example: 'CS',
    },
    isDir: {
      type: 'boolean',
      description: 'Indicates if the object is a directory',
      example: true,
    },
  },
} as const;

export const $Video = {
  required: ['groups', 'list', 'pathFromRoot'],
  type: 'object',
  properties: {
    pathFromRoot: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/DirectoryBreadcrumbsResponse',
      },
    },
    list: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FileSystemObject',
      },
    },
    groups: {
      type: 'array',
      description: 'Array of UUIDs representing groups assigned to the folder',
      example: [
        '6f0766f8-8580-4ec9-8674-3dcd72f8188b',
        'b743611b-8488-4694-9c91-49f94f2dfb24',
      ],
      items: {
        type: 'string',
        description:
          'Array of UUIDs representing groups assigned to the folder',
        format: 'uuid',
      },
    },
  },
  description: 'Folder in the file system',
} as const;

export const $EntryResponse = {
  required: ['body', 'createdOn', 'extensions', 'mediaType', 'title', 'url'],
  type: 'object',
  properties: {
    title: {
      type: 'string',
      description: 'Title of the entry',
    },
    createdOn: {
      type: 'string',
      description: 'Date when the entry was created',
      format: 'date-time',
    },
    body: {
      type: 'string',
      description: 'Body content of the entry',
    },
    extensions: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Extension',
      },
    },
    mediaType: {
      type: 'string',
      description: 'Type of the entry',
    },
    url: {
      type: 'string',
      description: 'URL of the vtt subtitles',
    },
    processing: {
      type: 'boolean',
    },
  },
} as const;

export const $Invites = {
  required: ['avatar', 'id', 'name'],
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: 'Organization UUID',
      format: 'uuid',
      example: '91b2999d-d327-4dc8-9956-2fadc0dc8778',
    },
    name: {
      type: 'string',
      description: 'Name of the organization',
      example: 'John',
    },
    avatar: {
      type: 'string',
      description: "URL of the organization's profile image",
      example: 'https://i.imgur.com/xapoQq3.jpeg',
    },
  },
  description: 'User invites to organizations',
} as const;

export const $MeResponse = {
  required: [
    'avatar',
    'email',
    'firstName',
    'id',
    'invites',
    'lastName',
    'organizations',
    'rootFolder',
  ],
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: 'UUID',
      format: 'uuid',
      example: '91b2999d-d327-4dc8-9956-2fadc0dc8778',
    },
    email: {
      type: 'string',
      description: 'E-mail of the user',
      example: 'mail@example.com',
    },
    firstName: {
      type: 'string',
      description: 'Name of the user',
      example: 'John',
    },
    lastName: {
      type: 'string',
      description: 'Lastname of the user',
      example: 'DOE',
    },
    rootFolder: {
      type: 'string',
      description: "UUID for the user's root folder",
      format: 'uuid',
    },
    avatar: {
      type: 'string',
      description: "URL of the user's profile image",
      example: 'https://i.imgur.com/xapoQq3.jpeg',
    },
    organizations: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UserOrganizations',
      },
    },
    invites: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Invites',
      },
    },
  },
} as const;

export const $UserOrganizations = {
  required: ['adminPermissions', 'avatar', 'id', 'name', 'rootFolder'],
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: 'Organization UUID',
      format: 'uuid',
      example: '91b2999d-d327-4dc8-9956-2fadc0dc8778',
    },
    name: {
      type: 'string',
      description: 'Name of the organization',
      example: 'John',
    },
    avatar: {
      type: 'string',
      description: "URL of the organization's profile image",
      example: 'https://i.imgur.com/xapoQq3.jpeg',
    },
    rootFolder: {
      type: 'string',
      description: "UUID for the organization's root folder",
      format: 'uuid',
    },
    adminPermissions: {
      type: 'array',
      items: {
        type: 'string',
        description: 'Organization admin permissions for the user',
        enum: ['ADMIN_ROLES', 'ADMIN_USERS', 'ADMIN_GROUPS', 'ADMIN_MEDIA'],
      },
    },
  },
  description: 'User Organizations',
} as const;
